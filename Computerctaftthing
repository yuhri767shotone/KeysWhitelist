-- Client Authentication Script with Anti-Tamper and Numeric Rank Handling

local requiredAccessLevel = 1  -- Minimum access level required
local serverId = 41            -- The server computer's ID

-- Anti-tamper: override os.pullEvent to prevent events like Ctrl+T
os.pullEvent = os.pullEventRaw

-- Open the modem for communication
local modemSide = "back"
if not peripheral.isPresent(modemSide) or peripheral.getType(modemSide) ~= "modem" then
    print("Error: Modem not found!")
    return
end
rednet.open(modemSide)

-- Function to handle the server's authentication response
local function handleAuthenticationResponse(response)
    if not response then
        print("No response from server.")
        return false
    end

    if response == "AUTH_DENIED" then
        print("Authentication failed! Employee ID not found.")
        return false
    end

    -- Check if the response starts with "AUTH_SUCCESS:"
    if response:sub(1, 13) == "AUTH_SUCCESS:" then
        local levelStr = response:sub(14)  -- Extract the rank string from character 14 onward

        -- Check if the rank indicates owner access
        if levelStr == "inf" or levelStr == "math.huge" then
            print("Owner access granted. Exiting...")
            error("Owner access - terminating client.")
            return true
        else
            local level = tonumber(levelStr)
            if level and level >= requiredAccessLevel then
                print("Access granted. Rank level " .. level)
                return true
            else
                print("Access denied. Insufficient rank. Required level: " .. requiredAccessLevel)
                return false
            end
        end
    else
        print("Unknown response from server: " .. response)
        return false
    end
end

-- Main authentication loop
local function authenticate()
    while true do
        term.clear()
        term.setCursorPos(1, 1)
        print("Enter Employee ID for Authentication:")
        local employeeID = read()

        if employeeID == "" then
            print("Please enter a valid ID.")
        else
            rednet.send(serverId, employeeID)
            local senderId, message = rednet.receive()

            if handleAuthenticationResponse(message) then
                break  -- Authentication successful; exit the loop
            else
                print("Please try again.")
                sleep(2)
            end
        end
    end
end

authenticate()
