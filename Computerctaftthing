-- Client Authentication Script with Anti-Tamper
local modemSide = "back"  -- The side where the modem is connected
local serverID = 1  -- The server ID you want to communicate with

-- The required access level (e.g., 1 or higher)
local requiredAccessLevel = 1

-- Anti-tamper functionality (prevents Ctrl+T from stopping the script)
os.pullEvent = os.pullEventRaw

-- Open the modem for communication
if not peripheral.isPresent(modemSide) or peripheral.getType(modemSide) ~= "modem" then
    print("Error: Modem not found!")
    return
end
rednet.open(modemSide)

-- Function to send authentication request
local function authenticate(id)
    rednet.send(serverID, id)  -- Send employee ID to server for authentication
end

-- Function to handle the authentication result
local function handleAuthenticationResult(message)
    if message then
        print("Received message: " .. message)  -- Debugging line
        if message:sub(1, 12) == "AUTH_SUCCESS:" then
            -- Parse the rank number from the message
            local rank = tonumber(message:sub(13))

            -- Check if the employee's rank meets the required access level
            if rank >= requiredAccessLevel then
                if rank == math.huge then
                    print("Owner access granted.")
                    -- Handle owner-specific behavior (e.g., give full access)
                else
                    print("Access granted. Rank level " .. rank)
                    -- Handle behavior for employees with sufficient rank
                end
                -- Proceed with the rest of the client operations
            else
                print("Access denied. Rank " .. rank .. " is insufficient. Required level: " .. requiredAccessLevel)
            end
        elseif message == "AUTH_DENIED" then
            print("Authentication Denied. Employee ID not found.")
        else
            print("Unknown response from server: " .. message)
        end
    else
        print("No response from server.")
    end
end

-- Main loop to continually prompt for user input
while true do
    term.clear()
    term.setCursorPos(1, 1)
    print("Enter Employee ID for Authentication:")

    local employeeID = read()  -- User inputs employee ID

    if employeeID == "" then
        print("Please enter a valid ID.")
    else
        authenticate(employeeID)  -- Send ID to the server for authentication
        
        -- Wait for the authentication response
        local senderId, message = rednet.receive()

        handleAuthenticationResult(message)  -- Handle the server's response
        
        -- Wait before the next input
        sleep(2)
    end
end
